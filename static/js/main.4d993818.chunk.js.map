{"version":3,"sources":["api/api.ts","api/users.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUsers","a","fetch","response","users","json","getUserPosts","userId","USER_POSTS_URL","userPosts","getPostDetails","postId","postDetails","PostsList","props","posts","selectedPostId","selectPostId","className","length","map","post","body","type","onClick","id","getPostComments","filter","comment","addComment","newComment","options","method","headers","JSON","stringify","deleteComment","commentId","NewCommentForm","useState","name","setName","email","setEmail","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","PostDetails","loading","setLoading","error","setError","selectedPost","setSelectedPost","postComments","setPostComments","isCommentsVisible","setIsCommentsVisible","useEffect","Promise","all","comments","addNewComment","commentsAfterUpdate","removeComment","commentsAfterDelete","isVisible","App","setPosts","setUsers","selectedUserId","setSelectedUserId","setSelectedPostId","allPosts","usersFromApi","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d993818.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n  const users = response.json();\n\n  return users;\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number) => {\n  const USER_POSTS_URL = userId ? `?userId=${userId}` : '';\n  const response = await fetch(`${BASE_URL}/posts${USER_POSTS_URL}`);\n  const userPosts = await response.json();\n\n  return userPosts;\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const postDetails = await response.json();\n\n  return postDetails;\n};\n","import React from 'react';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[];\n  selectedPostId: number;\n  selectPostId: (id: number) => void;\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { posts, selectedPostId, selectPostId } = props;\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.length > 0 ? (\n          posts.map(post => (\n            <li key={post.id} className=\"PostsList__item\">\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.body}\n              </div>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  if (selectedPostId === post.id) {\n                    selectPostId(0);\n                  } else {\n                    selectPostId(post.id);\n                  }\n                }}\n                className=\"PostsList__button button\"\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))\n        ) : (\n          <h3>There are no posts yet</h3>\n        )}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments`);\n  const userPosts = await response.json();\n\n  return userPosts.filter((comment: Comment) => comment.postId === postId);\n};\n\nexport const addComment = async (newComment: Partial<Comment>) => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  };\n  const response = await fetch(`${BASE_URL}/comments`, options);\n\n  return response;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n\n  return response;\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number;\n  addComment: (newComment: Partial<Comment>) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, addComment } = props;\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const setDefaultValues = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newComment = {\n      name,\n      email,\n      body,\n      postId,\n    };\n\n    addComment(newComment);\n    setDefaultValues();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\n            setBody(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\n\n  const commentsToggle = () => {\n    setIsCommentsVisible((isVisible) => !isVisible);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const [post, comments] = await Promise.all([\n          getPostDetails(selectedPostId),\n          getPostComments(selectedPostId),\n        ]);\n\n        setError(false);\n        setLoading(false);\n        setSelectedPost(post);\n        setPostComments(comments);\n      } catch {\n        setLoading(false);\n        setError(true);\n      }\n    })();\n  }, [selectedPostId]);\n\n  const addNewComment = async (newComment: Partial<Comment>) => {\n    await addComment(newComment);\n\n    const commentsAfterUpdate = await getPostComments(selectedPostId);\n\n    setPostComments(commentsAfterUpdate);\n  };\n\n  const removeComment = async (id: number) => {\n    await deleteComment(id);\n\n    const commentsAfterDelete = await getPostComments(selectedPostId);\n\n    setPostComments(commentsAfterDelete);\n  };\n\n  // eslint-disable-next-line\n  return (loading ? (\n    <h2>Please wait, loading...</h2>\n  ) : (\n    <>\n      {error && (\n        <h3>Ups... Something went wrong</h3>\n      )}\n      {!error && (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{selectedPost?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={commentsToggle}\n            >\n              {`${isCommentsVisible ? 'Hide' : 'Show'} ${postComments.length} comments`}\n            </button>\n\n            <ul className=\"PostDetails__list\">\n              {isCommentsVisible && postComments.map((comment: Comment) => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      removeComment(comment.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                addComment={addNewComment}\n                postId={selectedPostId}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  ));\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getUsers } from './api/users';\nimport { getUserPosts } from './api/posts';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [error, setError] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const allPosts = await getUserPosts(selectedUserId);\n\n        setError(false);\n        setPosts(allPosts);\n      } catch {\n        setError(true);\n      }\n    })();\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const usersFromApi = await getUsers();\n\n        setUsers(usersFromApi);\n      } catch {\n        setError(true);\n      }\n    })();\n  }, []);\n\n  const selectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const selectPost = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  return (\n    error ? (\n      <h2>Ups... something went wrong</h2>\n    ) : (\n      <div className=\"App\">\n        <header className=\"App__header\">\n          <label>\n            Select a user: &nbsp;\n\n            <select\n              className=\"App__user-selector\"\n              value={selectedUserId}\n              onChange={selectUser}\n            >\n              <option value=\"0\">All users</option>\n              {users.map(user => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n        </header>\n\n        <main className=\"App__main\">\n          <div className=\"App__sidebar\">\n            <PostsList\n              posts={posts}\n              selectedPostId={selectedPostId}\n              selectPostId={selectPost}\n            />\n          </div>\n\n          {!!selectedPostId && (\n            <div className=\"App__content\">\n              <PostDetails\n                selectedPostId={selectedPostId}\n              />\n            </div>\n          )}\n        </main>\n      </div>\n    )\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}